type VoteArgs = 
 record {
   proposal_id: nat;
   vote: Vote;
 };
type Vote = 
 variant {
   no;
   yes;
 };
type User = record {user_name: text;};
type UpdateSystemParamsPayload = 
 record {
   proposal_submission_deposit: opt Tokens;
   proposal_vote_threshold: opt Tokens;
   transfer_fee: opt Tokens;
 };
type Tokens = record {amount_e8s: nat;};
type TokenId = nat64;
type SystemParams = 
 record {
   proposal_submission_deposit: Tokens;
   proposal_vote_threshold: Tokens;
   transfer_fee: Tokens;
 };
type Result_4 = 
 variant {
   err: text;
   ok: opt vec Nft;
 };
type Result_3 = 
 variant {
   err: text;
   ok: opt text;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Account;
 };
type Result_1 = 
 variant {
   err: text;
   ok: nat;
 };
type Result = 
 variant {
   err: text;
   ok: ProposalState;
 };
type ProposalState = 
 variant {
   accepted;
   executing;
   failed: text;
   open;
   rejected;
   succeeded;
 };
type ProposalPayload = 
 record {
   canister_id: principal;
   message: blob;
   method: text;
 };
type Proposal = 
 record {
   id: nat;
   payload: ProposalPayload;
   proposal_text: text;
   proposer: principal;
   state: ProposalState;
   timestamp: int;
   voters: List;
   votes_no: Tokens;
   votes_yes: Tokens;
 };
type Nft = 
 record {
   id: TokenId;
   metadata: MetadataDesc;
   owner: principal;
 };
type MetadataVal = 
 variant {
   BlobContent: blob;
   Nat16Content: nat16;
   Nat32Content: nat32;
   Nat64Content: nat64;
   Nat8Content: nat8;
   NatContent: nat;
   PrincipalContent: principal;
   TextArrayContent: vec text;
   TextContent: text;
   TextToTextAssocListContent: AssocList;
 };
type MetadataPurpose = 
 variant {
   Preview;
   Rendered;
 };
type MetadataPart = 
 record {
   data: blob;
   key_val_data: vec MetadataKeyVal;
   purpose: MetadataPurpose;
 };
type MetadataKeyVal = 
 record {
   key: text;
   val: MetadataVal;
 };
type MetadataDesc = vec MetadataPart;
type List_1 = 
 opt record {
       record {
         text;
         text;
       };
       List_1;
     };
type List = 
 opt record {
       principal;
       List;
     };
type DAO = 
 service {
   account_balance: () -> (nat);
   call_spaces_canister: (ProposalPayload) -> (Result_4);
   call_webpage_canister: (ProposalPayload) -> (Result_3);
   create_account: (text) -> (Result_2);
   get_proposal: (nat) -> (opt Proposal) query;
   get_system_params: () -> (SystemParams) query;
   get_username: () -> (opt text) query;
   list_accounts: () -> (vec Account) query;
   list_open_proposals: () -> (vec Proposal) query;
   list_proposals: () -> (vec Proposal) query;
   submit_proposal: (ProposalPayload, text) -> (Result_1);
   update_system_params: (UpdateSystemParamsPayload) -> ();
   update_token_canister: (text) -> ();
   update_token_requirements: (record {
                                 requirement: nat;
                                 variable: text;
                               }) -> ();
   vote: (VoteArgs) -> (Result);
   whoami: () -> (principal) query;
 };
type BasicDaoStableStorage = 
 record {
   accounts: vec Account;
   proposals: vec Proposal;
   system_params: SystemParams;
 };
type AssocList = 
 opt record {
       record {
         text;
         text;
       };
       List_1;
     };
type Account = 
 record {
   owner: principal;
   user: User;
 };
service : (BasicDaoStableStorage) -> DAO
